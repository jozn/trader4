syntax = "proto3";

package pb;

option java_multiple_files = true;

option java_generate_equals_and_hash = true;

option java_package = "com.xtrader.protocol.openapi.v2.model";

option java_outer_classname = "ContainerOpenApiV2ModelMessages";

enum PayloadType {
    UNKNOWN3_US_PROTO3 = 0; // BY US FOR PROTO 3
    OA_APPLICATION_AUTH_REQ = 2100;
    OA_APPLICATION_AUTH_RES = 2101;
    OA_ACCOUNT_AUTH_REQ = 2102;
    OA_ACCOUNT_AUTH_RES = 2103;
    OA_VERSION_REQ = 2104;
    OA_VERSION_RES = 2105;
    OA_NEW_ORDER_REQ = 2106;
    OA_TRAILING_SL_CHANGED_EVENT = 2107;
    OA_CANCEL_ORDER_REQ = 2108;
    OA_AMEND_ORDER_REQ = 2109;
    OA_AMEND_POSITION_SLTP_REQ = 2110;
    OA_CLOSE_POSITION_REQ = 2111;
    OA_ASSET_LIST_REQ = 2112;
    OA_ASSET_LIST_RES = 2113;
    OA_SYMBOLS_LIST_REQ = 2114;
    OA_SYMBOLS_LIST_RES = 2115;
    OA_SYMBOL_BY_ID_REQ = 2116;
    OA_SYMBOL_BY_ID_RES = 2117;
    OA_SYMBOLS_FOR_CONVERSION_REQ = 2118;
    OA_SYMBOLS_FOR_CONVERSION_RES = 2119;
    OA_SYMBOL_CHANGED_EVENT = 2120;
    OA_TRADER_REQ = 2121;
    OA_TRADER_RES = 2122;
    OA_TRADER_UPDATE_EVENT = 2123;
    OA_RECONCILE_REQ = 2124;
    OA_RECONCILE_RES = 2125;
    OA_EXECUTION_EVENT = 2126;
    OA_SUBSCRIBE_SPOTS_REQ = 2127;
    OA_SUBSCRIBE_SPOTS_RES = 2128;
    OA_UNSUBSCRIBE_SPOTS_REQ = 2129;
    OA_UNSUBSCRIBE_SPOTS_RES = 2130;
    OA_SPOT_EVENT = 2131;
    OA_ORDER_ERROR_EVENT = 2132;
    OA_DEAL_LIST_REQ = 2133;
    OA_DEAL_LIST_RES = 2134;
    OA_SUBSCRIBE_LIVE_TRENDBAR_REQ = 2135;
    OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ = 2136;
    OA_GET_TRENDBARS_REQ = 2137;
    OA_GET_TRENDBARS_RES = 2138;
    OA_EXPECTED_MARGIN_REQ = 2139;
    OA_EXPECTED_MARGIN_RES = 2140;
    OA_MARGIN_CHANGED_EVENT = 2141;
    OA_ERROR_RES = 2142;
    OA_CASH_FLOW_HISTORY_LIST_REQ = 2143;
    OA_CASH_FLOW_HISTORY_LIST_RES = 2144;
    OA_GET_TICKDATA_REQ = 2145;
    OA_GET_TICKDATA_RES = 2146;
    OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT = 2147;
    OA_CLIENT_DISCONNECT_EVENT = 2148;
    OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ = 2149;
    OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES = 2150;
    OA_GET_CTID_PROFILE_BY_TOKEN_REQ = 2151;
    OA_GET_CTID_PROFILE_BY_TOKEN_RES = 2152;
    OA_ASSET_CLASS_LIST_REQ = 2153;
    OA_ASSET_CLASS_LIST_RES = 2154;
    OA_DEPTH_EVENT = 2155;
    OA_SUBSCRIBE_DEPTH_QUOTES_REQ = 2156;
    OA_SUBSCRIBE_DEPTH_QUOTES_RES = 2157;
    OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ = 2158;
    OA_UNSUBSCRIBE_DEPTH_QUOTES_RES = 2159;
    OA_SYMBOL_CATEGORY_REQ = 2160;
    OA_SYMBOL_CATEGORY_RES = 2161;
    OA_ACCOUNT_LOGOUT_REQ = 2162;
    OA_ACCOUNT_LOGOUT_RES = 2163;
    OA_ACCOUNT_DISCONNECT_EVENT = 2164;
    OA_SUBSCRIBE_LIVE_TRENDBAR_RES = 2165;
    OA_UNSUBSCRIBE_LIVE_TRENDBAR_RES = 2166;
    OA_MARGIN_CALL_LIST_REQ = 2167;
    OA_MARGIN_CALL_LIST_RES = 2168;
    OA_MARGIN_CALL_UPDATE_REQ = 2169;
    OA_MARGIN_CALL_UPDATE_RES = 2170;
    OA_MARGIN_CALL_UPDATE_EVENT = 2171;
    OA_MARGIN_CALL_TRIGGER_EVENT = 2172;
    OA_REFRESH_TOKEN_REQ = 2173;
    OA_REFRESH_TOKEN_RES = 2174;
}

/** Asset entity. */
message Asset {
    /*required*/ int64 assetId = 1; // The unique asset ID.
    /*required*/ string name = 2; // The asset name.
   string displayName = 3; // User friendly name.
   int32 digits = 4; // Precision of the asset.
}

/** Trading symbol entity. */
message Symbol {
    /*required*/ int64 symbolId = 1; // The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs.
    /*required*/ int32 digits = 2; // Number of price digits to be displayed.
    /*required*/ int32 pipPosition = 3; // Pip position on digits.
   bool enableShortSelling = 4; // If TRUE then the short selling with the symbol is enabled.
   bool guaranteedStopLoss = 5; // If TRUE then setting of guaranteedStopLoss is available for limited risk accounts.
   DayOfWeek swapRollover3Days = 6 [default = MONDAY]; // Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission.
   double swapLong = 7; // SWAP charge for long positions.
   double swapShort = 8; // SWAP charge for short positions.
   int64 maxVolume = 9; // Maximum allowed volume in cents for an order with a symbol.
   int64 minVolume = 10; // Minimum allowed volume in cents for an order with a symbol.
   int64 stepVolume = 11; // Step of the volume in cents for an order.
   uint64 maxExposure = 12; // Value of max exposure per symbol, per account. Blocks execution if breached.
    repeated Interval schedule = 13; // Symbol trading interval, specified in seconds starting from SUNDAY 00:00 in specified time zone.
   int64 commission = 14 [deprecated = true]; // Commission base amount. Total commission depends on commissionType. Use preciseTradingCommissionRate.
   CommissionType commissionType = 15 [default = USD_PER_MILLION_USD]; // Commission type. See CommissionType for details.
   uint32 slDistance = 16; // Minimum allowed distance between stop loss and current market price.
   uint32 tpDistance = 17; // Minimum allowed distance between take profit and current market price.
   uint32 gslDistance = 18; // Minimum allowed distance between guaranteed stop loss and current market price.
   int64 gslCharge = 19; // Guaranteed stop loss fee.
   SymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS]; // Unit of distance measure for slDistance, tpDistance, gslDistance.
   int64 minCommission = 21 [deprecated = true]; // Minimum commission amount per trade. Use preciseMinCommission.
   MinCommissionType minCommissionType = 22 [default = CURRENCY]; // Minimum commission Type. See MinCommissionType for details.
   string minCommissionAsset = 23 [default = "USD"]; // Currency for minimum commission. (USD or quote currency).
   int64 rolloverCommission = 24; // Amount of commission per trade for Shariah Compliant accounts in deposit currency (swapFree = TRUE).
   int32 skipRolloverDays = 25; // Initial period before the first rolloverCommission will be charged on the account.
   string scheduleTimeZone = 26; // Time zone for the symbol trading intervals.
   TradingMode tradingMode = 27 [default = ENABLED]; // Rules for trading with the symbol. See TradingMode for details.
   DayOfWeek rolloverCommission3Days = 28 [default = MONDAY]; // Day of the week (in UTC) when Administrative Fee charge amount will be tripled. Applied only if RolloverChargePeriod = 0 or 1
   SwapCalculationType swapCalculationType = 29 [default = PIPS]; // Specifies type of SWAP computation as PIPS (0) or PERCENTAGE (1, annual, in percent)
   int64 lotSize = 30; // Lot size of the Symbol (in cents)
   int64 preciseTradingCommissionRate = 31; // Commission base amount. Total commission depends on commissionType: for non-percentage types it is multiplied by 10^8.
   int64 preciseMinCommission = 32; // Minimum commission amount per trade multiplied by 10^8.
    repeated Holiday holiday = 33; // List of holidays for this symbol specified by broker.
}

/** Lightweight symbol entity. */
message LightSymbol {
    /*required*/ int64 symbolId = 1; // The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs.
   string symbolName = 2; // Name of the symbol (e.g. EUR/USD).
   bool enabled = 3; // If TRUE then symbol is visible for traders.
   int64 baseAssetId = 4; // Base asset.
   int64 quoteAssetId = 5; // Quote asset.
   int64 symbolCategoryId = 6; // Id of the symbol category used for symbols grouping.
   string description = 7;
}

message ArchivedSymbol {
    /*required*/ int64 symbolId = 1;
    /*required*/ string name = 2;
    /*required*/ int64 utcLastUpdateTimestamp = 3;
   string description = 4;
}

/** Symbol category entity. */
message SymbolCategory {
    /*required*/ int64 id = 1; // The unique identifier of the symbol category.
    /*required*/ int64 assetClassId = 2; // Link to the asset class. One asset class can have many symbol categories.
    /*required*/ string name = 3; // Category name.
}

enum DayOfWeek {
    NONE = 0;
    MONDAY = 1;
    TUESDAY = 2;
    WEDNESDAY = 3;
    THURSDAY = 4;
    FRIDAY = 5;
    SATURDAY = 6;
    SUNDAY = 7;
}

/** Symbol trading session entity. */
message Interval {
    /*required*/ uint32 startSecond = 3; // Interval start, specified in seconds starting from SUNDAY 00:00 in specified time zone (inclusive to the interval).
    /*required*/ uint32 endSecond = 4; // Interval end, specified in seconds starting from SUNDAY 00:00 in specified time zone (exclusive from the interval).
}

/** Enum for specifying type of trading commission. */
enum CommissionType {
    UNKNOWN4_US_PROTO3 = 0; // BY US FOR PROTO 3
    USD_PER_MILLION_USD = 1; // USD per million USD volume - usually used for FX. Example: 50 USD for 1 mil USD of trading volume.
    USD_PER_LOT = 2; // USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract.
    PERCENTAGE_OF_VALUE = 3; // Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 100,00.
    QUOTE_CCY_PER_LOT = 4; // Quote ccy of Symbol per 1 lot - will be used for CFDs and futures for commodities, and indices. Example: 15 EUR for 1 contract of DAX.
}

/** Enum for specifying stop loss and take profit distances. */
enum SymbolDistanceType {
    SYMBOL_DISTANCE_IN_POINTS = 1;
    SYMBOL_DISTANCE_IN_PERCENTAGE = 2;
}

/** Enum for specifying type of minimum trading commission. */
enum MinCommissionType {
    CURRENCY = 1;
    QUOTE_CURRENCY = 2;
}

/** Enum for specifying symbol trading mode. */
enum TradingMode {
    ENABLED = 0;
    DISABLED_WITHOUT_PENDINGS_EXECUTION = 1;
    DISABLED_WITH_PENDINGS_EXECUTION = 2;
    CLOSE_ONLY_MODE = 3;
}

/** Enum for specifying SWAP calculation type for symbol. */
enum SwapCalculationType {
    PIPS = 0; //Specifies type of SWAP computation as PIPS (0)
    PERCENTAGE = 1; //Specifies type of SWAP computation as PERCENTAGE (1, annual, in percent)
}

/** Enum for specifying access right for a trader. */
enum AccessRights {
    FULL_ACCESS = 0; // Enable all trading.
    CLOSE_ONLY = 1; // Only closing trading request are enabled.
    NO_TRADING = 2; // View only access.
    NO_LOGIN = 3; // No access.
}

/** Enum for specifying margin calculation type for an account. */
enum TotalMarginCalculationType {
    MAX = 0;
    SUM = 1;
    NET = 2;
}

/** Enum for specifying type of an account. */
enum AccountType {
    HEDGED = 0; // Allows multiple positions on a trading account for a symbol.
    NETTED = 1; // Only one position per symbol is allowed on a trading account.
    SPREAD_BETTING = 2; // Spread betting type account.
}

/** Trading account entity. */
message Trader {
    /*required*/ int64 ctidTraderAccountId = 1; // The unique Trader's Account ID used to match the responses to the Trader's Account.
    /*required*/ int64 balance = 2; // Current account balance.
   int64 balanceVersion = 3; // Balance version used to identify the final balance. Increments each time when the trader's account balance is changed.
   int64 managerBonus = 4; // Amount of broker's bonus allocated to the account.
   int64 ibBonus = 5; // Amount of introducing broker bonus allocated to the account.
   int64 nonWithdrawableBonus = 6; // Broker's bonus that cannot be withdrew from the account as cash.
   AccessRights accessRights = 7 [default = FULL_ACCESS]; // Access rights that an owner has to the account in cTrader platform. See AccessRights for details.
    /*required*/ int64 depositAssetId = 8; // Deposit currency of the account.
   bool swapFree = 9; // If TRUE then account is Shariah compliant.
   uint32 leverageInCents = 10; // Account leverage (e.g. If leverage = 1:50 then value = 5000).
   TotalMarginCalculationType totalMarginCalculationType = 11; // Margin computation type for the account (MAX, SUM, NET).
   uint32 maxLeverage = 12; // Maximum allowed leverage for the account. Used as validation when a Trader can change leverage value.
   bool frenchRisk = 13 [deprecated = true]; // If TRUE then account is AMF compliant. Use isLimitedRisk and limitedRiskMarginCalculationStrategy.
   int64 traderLogin = 14; // ID of the account that is unique per server (Broker).
   AccountType accountType = 15 [default = HEDGED]; // Account type: HEDGED, NETTED, etc.
   string brokerName = 16; // Some whitelabel assigned to trader by broker at the moment of account creation.
   int64 registrationTimestamp = 17; // Unix timestamp of the account registration. Should be used as minimal date in historical data requests.
   bool isLimitedRisk = 18; // If TRUE then account is compliant to use specific margin calculation strategy.
   LimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE]; // Special strategy used in margin calculations for this account (if account isLimitedRisk).
   uint32 moneyDigits = 20; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects balance, managerBonus, ibBonus, nonWithdrawableBonus.
}

/** Position status ENUM. */
enum PositionStatus {
    POSITION_STATUS_OPEN = 1;
    POSITION_STATUS_CLOSED = 2;
    POSITION_STATUS_CREATED = 3; // Empty position is created for pending order.
    POSITION_STATUS_ERROR = 4;
}

/** Trader side ENUM. Used for order, position, deal. */
enum TradeSide {
    BUY = 1;
    SELL = 2;
}

/** Order type ENUM. */
enum OrderType {
    MARKET = 1;
    LIMIT = 2;
    STOP = 3;
    STOP_LOSS_TAKE_PROFIT = 4;
    MARKET_RANGE = 5;
    STOP_LIMIT = 6;
}

/** Order's time in force ENUM. */
enum TimeInForce {
    GOOD_TILL_DATE = 1;
    GOOD_TILL_CANCEL = 2;
    IMMEDIATE_OR_CANCEL = 3;
    FILL_OR_KILL = 4;
    MARKET_ON_OPEN = 5;
}

/** Order status ENUM. */
enum OrderStatus {
    ORDER_STATUS_ACCEPTED = 1; // Order request validated and accepted for execution.
    ORDER_STATUS_FILLED = 2; // Order is fully filled.
    ORDER_STATUS_REJECTED = 3; // Order is rejected due to validation.
    ORDER_STATUS_EXPIRED = 4; // Order expired. Might be valid for orders with partially filled volume that were expired on LP.
    ORDER_STATUS_CANCELLED = 5; // Order is cancelled. Might be valid for orders with partially filled volume that were cancelled by LP.
}

/** Stop Order and Stop Lost triggering method ENUM. */
enum OrderTriggerMethod {
    TRADE = 1; // Stop Order: buy is triggered by ask, sell by bid; Stop Loss Order: for buy position is triggered by bid and for sell position by ask.
    OPPOSITE = 2; // Stop Order: buy is triggered by bid, sell by ask; Stop Loss Order: for buy position is triggered by ask and for sell position by bid.
    DOUBLE_TRADE = 3; // The same as TRADE, but trigger is checked after the second consecutive tick.
    DOUBLE_OPPOSITE = 4; // The same as OPPOSITE, but trigger is checked after the second consecutive tick.
}

/** Trade position entity. */
message Position {
    /*required*/ int64 positionId = 1; // The unique ID of the position. Note: trader might have two positions with the same id if positions are taken from accounts from different brokers.
    /*required*/ TradeData tradeData = 2; // Position details. See TradeData for details.
    /*required*/ PositionStatus positionStatus = 3; // Current status of the position.
    /*required*/ int64 swap = 4; // Total amount of charged swap on open position.
   double price = 5; // VWAP price of the position based on all executions (orders) linked to the position.
   double stopLoss = 6; // Current stop loss price.
   double takeProfit = 7; // Current take profit price.
   int64 utcLastUpdateTimestamp = 8; // Time of the last change of the position, including amend SL/TP of the position, execution of related order, cancel or related order, etc.
   int64 commission = 9; // Current unrealized commission related to the position.
   double marginRate = 10; // Rate for used margin computation. Represented as Base/Deposit.
   int64 mirroringCommission = 11; // Amount of unrealized commission related to following of strategy provider.
   bool guaranteedStopLoss = 12; // If TRUE then position's stop loss is guaranteedStopLoss.
   uint64 usedMargin = 13; // Amount of margin used for the position in deposit currency.
   OrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE]; // Stop trigger method for SL/TP of the position.
   uint32 moneyDigits = 15; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects swap, commission, mirroringCommission, usedMargin.
}

/** Position/order trading details entity. */
message TradeData {
    /*required*/ int64 symbolId = 1; // The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs.
    /*required*/ int64 volume = 2; // Volume in cents.
    /*required*/ TradeSide tradeSide = 3; // Buy, Sell.
   int64 openTimestamp = 4; // Time when position was opened or order was created.
   string label = 5; // Text label specified during order request.
   bool guaranteedStopLoss = 6; // If TRUE then position/order stop loss is guaranteedStopLoss.
   string comment = 7; // User-specified comment.
}

/** Trade order entity. */
message Order {
    /*required*/ int64 orderId = 1; // The unique ID of the order. Note: trader might have two orders with the same id if orders are taken from accounts from different brokers.
    /*required*/ TradeData tradeData = 2; // Detailed trader data.
    /*required*/ OrderType orderType = 3; // Order type.
    /*required*/ OrderStatus orderStatus = 4; // Order status.
   int64 expirationTimestamp = 6; // If the order has time in force GTD then expiration is specified.
   double executionPrice = 7; // Price at which an order was executed. For order with FILLED status.
   int64 executedVolume = 8; // Part of the volume that was filled.
   int64 utcLastUpdateTimestamp = 9; // Timestamp of the last update of the order.
   double baseSlippagePrice = 10; // Used for Market Range order with combination of slippageInPoints to specify price range were order can be executed.
   int64 slippageInPoints = 11; // Used for Market Range and STOP_LIMIT orders to to specify price range were order can be executed.
   bool closingOrder = 12; // If TRUE then the order is closing part of whole position. Must have specified positionId.
   double limitPrice = 13; // Valid only for LIMIT orders.
   double stopPrice = 14; // Valid only for STOP and STOP_LIMIT orders.
   double stopLoss = 15; // Absolute stopLoss price.
   double takeProfit = 16; // Absolute takeProfit price.
   string clientOrderId = 17; //ClientOrderId. Max Length = 50 chars.
   TimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL]; // Order's time in force. Depends on order type.
   int64 positionId = 19; // ID of the position linked to the order (e.g. closing order, order that increase volume of a specific position, etc.).
   int64 relativeStopLoss = 20; // Relative stopLoss that can be specified instead of absolute as one. Specified in 1/100_000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss.
   int64 relativeTakeProfit = 21; // Relative takeProfit that can be specified instead of absolute one. Specified in 1/100_000 of unit of a price. ForBUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit.
   bool isStopOut = 22; // If TRUE then order was stopped out from server side.
   bool trailingStopLoss = 23; // If TRUE then order is trailingStopLoss. Valid for STOP_LOSS_TAKE_PROFIT order.
   OrderTriggerMethod stopTriggerMethod = 24 [default = TRADE]; // Trigger method for the order. Valid only for STOP and STOP_LIMIT orders.
}

/** Execution event type ENUM. */
enum ExecutionType {
    ORDER_ACCEPTED = 2; // Order passed validation.
    ORDER_FILLED = 3; // Order filled.
    ORDER_REPLACED = 4; // Pending order is changed with a new one.
    ORDER_CANCELLED = 5; // Order cancelled.
    ORDER_EXPIRED = 6; // Order with GTD time in force is expired.
    ORDER_REJECTED = 7; // Order is rejected due to validations.
    ORDER_CANCEL_REJECTED = 8; // Cancel order request is rejected.
    SWAP = 9; // Type related to SWAP execution events.
    DEPOSIT_WITHDRAW = 10; // Type related to event of deposit or withdrawal cash flow operation.
    ORDER_PARTIAL_FILL = 11; // Order is partially filled.
    BONUS_DEPOSIT_WITHDRAW = 12; // Type related to event of bonus deposit or bonus withdrawal.
}

/** Bonus deposit/withdrawal entity. */
message BonusDepositWithdraw {
    /*required*/ ChangeBonusType operationType = 1; // Type of the operation. Deposit/Withdrawal.
    /*required*/ int64 bonusHistoryId = 2; // The unique ID of the bonus deposit/withdrawal operation.
    /*required*/ int64 managerBonus = 3; // Total amount of broker's bonus after the operation.
    /*required*/ int64 managerDelta = 4; // Amount of bonus deposited/withdrew by manager.
    /*required*/ int64 ibBonus = 5; // Total amount of introducing broker's bonus after the operation.
    /*required*/ int64 ibDelta = 6; // Amount of bonus deposited/withdrew by introducing broker.
    /*required*/ int64 changeBonusTimestamp = 7; // Time when the bonus operation was executed.
   string externalNote = 8; // Note added to operation. Visible to the trader.
   int64 introducingBrokerId = 9; // ID of introducing broker who deposited/withdrew bonus.
   uint32 moneyDigits = 10; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects managerBonus, managerDelta, ibBonus, ibDelta.
}

/** Bonus operation type ENUM. */
enum ChangeBonusType {
    BONUS_DEPOSIT = 0;
    BONUS_WITHDRAW = 1;
}

/** Account deposit/withdrawal operation entity. */
message DepositWithdraw {
    /*required*/ ChangeBalanceType operationType = 1; // Type of the operation. Deposit/Withdrawal.
    /*required*/ int64 balanceHistoryId = 2; // The unique ID of the deposit/withdrawal operation.
    /*required*/ int64 balance = 3; // Account balance after the operation was executed.
    /*required*/ int64 delta = 4; // Amount of deposit/withdrawal operation.
    /*required*/ int64 changeBalanceTimestamp = 5; // Time when deposit/withdrawal operation was executed.
   string externalNote = 6; // Note added to operation. Visible to the trader.
   int64 balanceVersion = 7; // Balance version used to identify the final balance. Increments each time when the trader's account balance is changed.
   int64 equity = 8; // Total account's equity after balance operation was executed.
   uint32 moneyDigits = 9; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects balance, delta, equity.
}

/** Balance operation entity. Covers all cash movement operations related to account, trading, IB operations, mirroring, etc. */
enum ChangeBalanceType {
    BALANCE_DEPOSIT = 0; // Cash deposit.
    BALANCE_WITHDRAW = 1; // Cash withdrawal.
    BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER = 3; // Received mirroring commission.
    BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER = 4; // Paid mirroring commission.
    BALANCE_DEPOSIT_IB_COMMISSIONS = 5; // For IB account. Commissions paid by trader.
    BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE = 6; // For IB account. Withdrawal of commissions shared with broker.
    BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB = 7; // For IB account. Commissions paid by sub-ibs.
    BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER = 8; // For IB account. Commissions paid by broker.
    BALANCE_DEPOSIT_REBATE = 9; // Deposit rebate for trading volume for period.
    BALANCE_WITHDRAW_REBATE = 10; // Withdrawal of rebate.
    BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER = 11; // Mirroring commission.
    BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER = 12; // Mirroring commission.
    BALANCE_WITHDRAW_BONUS_COMPENSATION = 13; // For IB account. Share commission with the Broker.
    BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER = 14; // IB commissions.
    BALANCE_DEPOSIT_DIVIDENDS = 15; // Deposit dividends payments.
    BALANCE_WITHDRAW_DIVIDENDS = 16; // Negative dividend charge for short position.
    BALANCE_WITHDRAW_GSL_CHARGE = 17; // Charge for guaranteedStopLoss.
    BALANCE_WITHDRAW_ROLLOVER = 18; // Charge of rollover fee for Shariah compliant accounts.
    BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS = 19; // Broker's operation to deposit bonus.
    BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS = 20; // Broker's operation to withdrawal bonus.
    BALANCE_DEPOSIT_SWAP = 21; // Deposits of negative SWAP.
    BALANCE_WITHDRAW_SWAP = 22; // SWAP charges.

    BALANCE_DEPOSIT_MANAGEMENT_FEE = 27; // Mirroring commission.
    BALANCE_WITHDRAW_MANAGEMENT_FEE = 28; // Mirroring commission. Deprecated since 7.1 in favor of BALANCE_WITHDRAW_COPY_FEE (34).
    BALANCE_DEPOSIT_PERFORMANCE_FEE = 29; // Mirroring commission.
    BALANCE_WITHDRAW_FOR_SUBACCOUNT = 30;
    BALANCE_DEPOSIT_TO_SUBACCOUNT = 31;
    BALANCE_WITHDRAW_FROM_SUBACCOUNT = 32;
    BALANCE_DEPOSIT_FROM_SUBACCOUNT = 33;
    BALANCE_WITHDRAW_COPY_FEE = 34; // Withdrawal fees to Strategy Provider.
    BALANCE_WITHDRAW_INACTIVITY_FEE = 35; // Withdraw of inactivity fee from the balance
    BALANCE_DEPOSIT_TRANSFER = 36;
    BALANCE_WITHDRAW_TRANSFER = 37;
    BALANCE_DEPOSIT_CONVERTED_BONUS = 38;
}

/** Execution entity. */
message Deal {
    /*required*/ int64 dealId = 1; // The unique ID of the execution deal.
    /*required*/ int64 orderId = 2; // Source order of the deal.
    /*required*/ int64 positionId = 3; // Source position of the deal.
    /*required*/ int64 volume = 4; // Volume sent for execution, in cents.
    /*required*/ int64 filledVolume = 5; // Filled volume, in cents.
    /*required*/ int64 symbolId = 6; // The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs.
    /*required*/ int64 createTimestamp = 7; // Time when the deal was sent for execution.
    /*required*/ int64 executionTimestamp = 8; // Time when the deal was executed.
   int64 utcLastUpdateTimestamp = 9; // Timestamp when the deal was created, executed or rejected.
   double executionPrice = 10; // Execution price.
    /*required*/ TradeSide tradeSide = 11; // Buy/Sell.
    /*required*/ DealStatus dealStatus = 12; // Status of the deal.
   double marginRate = 13; // Rate for used margin computation. Represented as Base/Deposit.
   int64 commission = 14; // Amount of trading commission associated with the deal.
   double baseToUsdConversionRate = 15; // Base to USD conversion rate on the time of deal execution.
   ClosePositionDetail closePositionDetail = 16; // Closing position detail. Valid only for closing deal.
   uint32 moneyDigits = 17; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects commission.
}

/** Deal status ENUM. */
enum DealStatus {
    FILLED = 2; // Deal filled.
    PARTIALLY_FILLED = 3; // Deal is partially filled.
    REJECTED = 4; // Deal is correct but was rejected by liquidity provider (e.g. no liquidity).
    INTERNALLY_REJECTED = 5; // Deal rejected by server (e.g. no price quotes).
    ERROR = 6; // Deal is rejected by LP due to error (e.g. symbol is unknown).
    MISSED = 7; // Liquidity provider did not sent response on the deal during specified execution time period.
}

/** Trading details for closing deal. */
message ClosePositionDetail {
    /*required*/ double entryPrice = 1; // Position price at the moment of filling the closing order.
    /*required*/ int64 grossProfit = 2; // Amount of realized gross profit after closing deal execution.
    /*required*/ int64 swap = 3; // Amount of realized swap related to closed volume.
    /*required*/ int64 commission = 4; // Amount of realized commission related to closed volume.
    /*required*/ int64 balance = 5; // Account balance after closing deal execution.
   double quoteToDepositConversionRate = 6; // Quote/Deposit currency conversion rate on the time of closing deal execution.
   int64 closedVolume = 7; // Closed volume in cents.
   int64 balanceVersion = 8; // Balance version of the account related to closing deal operation.
   uint32 moneyDigits = 9; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, balance.
}

/** Trendbar period ENUM. */
enum TrendbarPeriod {
    M1 = 1;
    M2 = 2;
    M3 = 3;
    M4 = 4;
    M5 = 5;
    M10 = 6;
    M15 = 7;
    M30 = 8;
    H1 = 9;
    H4 = 10;
    H12 = 11;
    D1 = 12;
    W1 = 13;
    MN1 = 14;
}

/** Historical Trendbar entity. */
message Trendbar {
    /*required*/ int64 volume = 3; // Bar volume in ticks.
   TrendbarPeriod period = 4 [default = M1]; // Bar period.
   int64 low = 5; // Low price of the bar.
   uint64 deltaOpen = 6; // Delta between open and low price. open = low + deltaOpen.
   uint64 deltaClose = 7; // Delta between close and low price. close = low + deltaClose.
   uint64 deltaHigh = 8; // Delta between high and low price. high = low + deltaHigh.
   uint32 utcTimestampInMinutes = 9; // Timestamp of the bar. Equal to the timestamp of the open tick.
}

/** Expected margin computation entity. */
message ExpectedMargin {
    /*required*/ int64 volume = 1; // Volume in cents used for computation of expected margin.
    /*required*/ int64 buyMargin = 2; // Buy margin amount.
    /*required*/ int64 sellMargin = 3; // Sell margin amount.
}

/** Price quote type. */
enum QuoteType {
    BID = 1;
    ASK = 2;
}

/** Historical tick data type. */
message TickData {
    /*required*/ int64 timestamp = 1; // Tick timestamp.
    /*required*/ int64 tick = 2; // Tick price.
}

/** Open API application permission in regards to token ENUM. */
enum ClientPermissionScope {
    SCOPE_VIEW = 0; // Allows to use only view commends. Trade is prohibited.
    SCOPE_TRADE = 1; // Allows to use all commands.
}

/** Trader profile entity. Empty due to GDPR. */
message CtidProfile {
    /*required*/ int64 userId = 1;
}

/** Trader account entity. */
message CtidTraderAccount {
    /*required*/ uint64 ctidTraderAccountId = 1; // Unique identifier of the trader's account. Used to match responses to trader's accounts.cTrader platform. Different brokers might have different ids
   bool isLive = 2; // If TRUE then the account is belong to Live environment and live host must be used to authorize it
   int64 traderLogin = 3; // TraderLogin for a specific account. Value is displayed on Client App UI
   int64 lastClosingDealTimestamp = 4;
   int64 lastBalanceUpdateTimestamp = 5;
}

/** Asset class entity. */
message AssetClass {
   int64 id = 1; // Unique asset ID.
   string name = 2; // Asset class name.
}

/** Depth of market entity. */
message DepthQuote {
    /*required*/ uint64 id = 1; // Quote ID.
    /*required*/ uint64 size = 3; // Quote size in cents.
   uint64 bid = 4; // Bid price for bid quotes.
   uint64 ask = 5; // Ask price for ask quotes.
}

/** Margin call entity, specifies threshold for exact margin call type. Only 3 instances of margin calls are supported, identified by marginCallType. See NotificationType for details. */
message MarginCall {
    /*required*/ NotificationType marginCallType = 1;
    /*required*/ double marginLevelThreshold = 2;
   int64 utcLastUpdateTimestamp = 3;
}

/** Type of notification, currently only 3 instances of marginCall are supported. */
enum NotificationType {
    MARGIN_LEVEL_THRESHOLD_1 = 61; // one of three margin calls, they are all similar.
    MARGIN_LEVEL_THRESHOLD_2 = 62; // one of three margin calls, they are all similar.
    MARGIN_LEVEL_THRESHOLD_3 = 63; // one of three margin calls, they are all similar.
}

/** Error code ENUM. */
enum ErrorCode {
    //Authorization
    OA_AUTH_TOKEN_EXPIRED = 1; // When token used for account authorization is expired.
    ACCOUNT_NOT_AUTHORIZED = 2; // When account is not authorized.
    ALREADY_LOGGED_IN = 14; // When client tries to authorize after it was already authorized
    CH_CLIENT_AUTH_FAILURE = 101; // Open API client is not activated or wrong client credentials.
    CH_CLIENT_NOT_AUTHENTICATED = 102; // When a command is sent for not authorized Open API client.
    CH_CLIENT_ALREADY_AUTHENTICATED = 103; // Client is trying to authenticate twice.
    CH_ACCESS_TOKEN_INVALID = 104; // Access token is invalid.
    CH_SERVER_NOT_REACHABLE = 105; // Trading service is not available.
    CH_CTID_TRADER_ACCOUNT_NOT_FOUND = 106; // Trading account is not found.
    CH_OA_CLIENT_NOT_FOUND = 107; // Could not find this client id.

    //General
    REQUEST_FREQUENCY_EXCEEDED = 108; // Request frequency is reached.
    SERVER_IS_UNDER_MAINTENANCE = 109; // Server is under maintenance.
    CHANNEL_IS_BLOCKED = 110; // Operations are not allowed for this account.
    CONNECTIONS_LIMIT_EXCEEDED = 67; // Limit of connections is reached for this Open API client.
    WORSE_GSL_NOT_ALLOWED = 68; // Not allowed to increase risk for Positions with Guaranteed Stop Loss.
    SYMBOL_HAS_HOLIDAY = 69; // Trading disabled because symbol has holiday.

    //Pricing
    NOT_SUBSCRIBED_TO_SPOTS = 112; // When trying to subscribe to depth, trendbars, etc. without spot subscription.
    ALREADY_SUBSCRIBED = 113; // When subscription is requested for an active.
    SYMBOL_NOT_FOUND = 114; // Symbol not found.
    UNKNOWN_SYMBOL = 115; // Note: to be merged with SYMBOL_NOT_FOUND.
    INCORRECT_BOUNDARIES = 35; // When requested period (from,to) is too large or invalid values are set to from/to.

    //Trading
    NO_QUOTES = 117; // Trading cannot be done as not quotes are available. Applicable for Book B.
    NOT_ENOUGH_MONEY = 118; // Not enough funds to allocate margin.
    MAX_EXPOSURE_REACHED = 119; // Max exposure limit is reached for a {trader, symbol, side}.
    POSITION_NOT_FOUND = 120; // Position not found.
    ORDER_NOT_FOUND = 121; // Order not found.
    POSITION_NOT_OPEN = 122; // When trying to close a position that it is not open.
    POSITION_LOCKED = 123; // Position in the state that does not allow to perform an operation.
    TOO_MANY_POSITIONS = 124; // Trading account reached its limit for max number of open positions and orders.
    TRADING_BAD_VOLUME = 125; // Invalid volume.
    TRADING_BAD_STOPS = 126; // Invalid stop price.
    TRADING_BAD_PRICES = 127; // Invalid price (e.g. negative).
    TRADING_BAD_STAKE = 128; // Invalid stake volume (e.g. negative).
    PROTECTION_IS_TOO_CLOSE_TO_MARKET = 129; // Invalid protection prices.
    TRADING_BAD_EXPIRATION_DATE = 130; // Invalid expiration.
    PENDING_EXECUTION = 131; // Unable to apply changes as position has an order under execution.
    TRADING_DISABLED = 132; // Trading is blocked for the symbol.
    TRADING_NOT_ALLOWED = 133; // Trading account is in read only mode.
    UNABLE_TO_CANCEL_ORDER = 134; // Unable to cancel order.
    UNABLE_TO_AMEND_ORDER = 135; // Unable to amend order.
    SHORT_SELLING_NOT_ALLOWED = 136; // Short selling is not allowed.
}

enum LimitedRiskMarginCalculationStrategy {
    ACCORDING_TO_LEVERAGE = 0;
    ACCORDING_TO_GSL = 1;
    ACCORDING_TO_GSL_AND_LEVERAGE = 2;
}

message Holiday {
    /*required*/ int64 holidayId = 1; // Unique ID of holiday.
    /*required*/ string name = 2; // Name of holiday.
   string description = 3; // Description of holiday.
    /*required*/ string scheduleTimeZone = 4; // Timezone used for holiday.
    /*required*/ int64 holidayDate = 5; // Amount of days from 01-01-1970, multiply it by 86400000 to get unix timestamp.
    /*required*/ bool isRecurring = 6; // If TRUE, then the holiday happens each year.
   int32 startSecond = 7; // Amount of seconds from 00:00:00 of the holiday day when holiday actually starts.
   int32 endSecond = 8; // Amount of seconds from 00:00:00 of the holiday day when holiday actually finishes.
}